name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  BUILD_TYPE: Release

jobs:
  build:
    name: Build and Test
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        compiler: [gcc, clang, msvc]
        exclude:
          - os: windows-latest
            compiler: gcc
          - os: windows-latest
            compiler: clang
          - os: ubuntu-latest
            compiler: msvc
          - os: macos-latest
            compiler: msvc
          - os: macos-latest
            compiler: gcc

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Install Dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake ninja-build

    - name: Install Dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install cmake ninja

    - name: Configure CMake
      run: |
        cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -G Ninja

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: ctest -C ${{env.BUILD_TYPE}} --output-on-failure

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-format clang-tidy

    - name: Check Format
      run: |
        find . -name '*.cpp' -o -name '*.hpp' | grep -v 'build/' | xargs clang-format --dry-run -Werror

    - name: Run Clang-Tidy
      run: |
        mkdir build && cd build
        cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ..
        cd ..
        find src include -name '*.cpp' -o -name '*.hpp' | xargs clang-tidy -p build

  documentation:
    name: Build Documentation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y doxygen graphviz

    - name: Build Documentation
      run: |
        cd docs
        doxygen Doxyfile

    - name: Deploy Documentation
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/html

  release:
    name: Create Release
    needs: [build, code-quality, documentation]
    if: github.event_name == 'release' && github.event.action == 'published'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Build Release Package
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Release
        cmake --build build --config Release
        cd build && cpack

    - name: Upload Release Assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          build/*.tar.gz
          build/*.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  python-package:
    name: Python Package Build & Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.7, 3.8, 3.9, 3.10, 3.11]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Upgrade pip and install build tools
        run: |
          python -m pip install --upgrade pip setuptools wheel
      - name: Install build requirements
        run: |
          python -m pip install pybind11
      - name: Install package
        run: |
          pip install .
      - name: Run Python tests
        run: |
          pip install pytest
          pytest bindings/python/tests/

  python-docs:
    name: Python Sphinx Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install Sphinx and dependencies
        run: |
          python -m pip install --upgrade pip
          pip install sphinx sphinx-autodoc-typehints sphinx-rtd-theme
      - name: Install package
        run: |
          pip install .
      - name: Build Sphinx docs
        run: |
          cd bindings/python/docs
          make html
      - name: Upload Sphinx HTML docs
        uses: actions/upload-artifact@v3
        with:
          name: sphinx-html-docs
          path: bindings/python/docs/build/html 